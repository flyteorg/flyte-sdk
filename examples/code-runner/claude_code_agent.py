# /// script
# requires-python = "==3.13"
# dependencies = [
#    "flyte>=2.0.0b0",
# ]
# ///

import tempfile
from pathlib import Path

import flyte
from flyte.extras import ContainerTask
from flyte.io import Dir

env = flyte.TaskEnvironment(
    name="claude_code_agent",
    image=flyte.Image.from_uv_script(__file__, name="claude-code-agent"),
    resources=flyte.Resources(cpu=1, memory="2Gi"),
)

# Claude Code container task
claude_code_task = ContainerTask(
    name="run_claude_code",
    image="node:current-alpine3.22",
    input_data_dir="/var/inputs",
    output_data_dir="/var/outputs",
    inputs={"prompt": str, "working_dir": Dir, "max_turns": int, "budget_limit": float},
    outputs={"generated_code": Dir, "exit_code": int, "log": str},
    command=[
        "/bin/bash",
        "-c",
        (
            "npm install -g @anthropic-ai/claude-code && "
            "set -o pipefail && "
            "cd /var/inputs/working_dir && "
            "mkdir -p /var/outputs/generated_code && "
            "cp -r . /var/outputs/generated_code/ && "
            "cd /var/outputs/generated_code && "
            'echo "{{.inputs.prompt}}" | claude-code '
            "--print "
            "--max-turns {{.inputs.max_turns}} "
            "--dangerously-skip-permissions "
            "--output-format text "
            "> /var/outputs/log 2>&1; "
            "echo $? > /var/outputs/exit_code"
        ),
    ],
    secrets=[flyte.Secret(key="anthropic-api-key", as_env_var="ANTHROPIC_API_KEY")],
    resources=flyte.Resources(cpu=2, memory="4Gi"),
)


@env.task
async def create_working_directory() -> Dir:
    """
    Create a temporary working directory for Claude Code to operate in.
    """
    temp_dir = Path(tempfile.mkdtemp(prefix="claude_code_workspace_"))

    # Create a basic project structure
    (temp_dir / "README.md").write_text(
        "# Claude Code Generated Project\n\nThis project was generated by Claude Code.\n"
    )

    # Create basic directories
    (temp_dir / "src").mkdir(exist_ok=True)
    (temp_dir / "tests").mkdir(exist_ok=True)

    return await Dir.from_local(str(temp_dir))


@env.task
async def claude_code_generator(
    prompt: str, working_dir: Dir = None, max_turns: int = 10, budget_limit: float = 5.0, timeout_minutes: int = 30
) -> tuple[Dir, str, str, bool]:
    """
    Generate code using Claude Code based on the user's prompt.

    Args:
        prompt: The user's prompt/request for Claude Code
        working_dir: Optional working directory, if None a temporary one is created
        max_turns: Maximum number of agentic turns to allow
        budget_limit: Maximum budget in dollars to spend on API calls
        timeout_minutes: Maximum time to allow Claude Code to run

    Returns:
        tuple of (generated_code_dir, execution_log, exit_code, success)
    """
    print("---GENERATING CODE WITH CLAUDE CODE---")
    print(f"Prompt: {prompt}")
    print(f"Max turns: {max_turns}")
    print(f"Budget limit: ${budget_limit}")

    if working_dir is None:
        working_dir = await create_working_directory()

    try:
        # Run Claude Code
        generated_code, exit_code, log = await claude_code_task(
            prompt=prompt, working_dir=working_dir, max_turns=max_turns, budget_limit=budget_limit
        )

        success = exit_code.strip() == "0"

        if success:
            print("---CLAUDE CODE: SUCCESS---")
        else:
            print(f"---CLAUDE CODE: FAILED WITH EXIT CODE {exit_code}---")
            print(f"Log: {log}")

        return generated_code, log, exit_code, success

    except Exception as e:
        print(f"---CLAUDE CODE: ERROR - {e!s}---")
        # Return the working directory as fallback
        return working_dir, f"Error: {e!s}", "1", False


@env.task
async def main(
    prompt: str = "Create a simple Python web API using FastAPI that has endpoints for creating, "
    "reading, updating and deleting users. Include proper error handling and validation.",
    max_turns: int = 10,
    budget_limit: float = 5.0,
    timeout_minutes: int = 30,
) -> str:
    """
    Main task that orchestrates Claude Code execution.

    Args:
        prompt: The task prompt for Claude Code
        max_turns: Maximum number of agentic turns to allow (default: 10)
        budget_limit: Maximum budget in dollars to spend on API calls (default: $5.00)
        timeout_minutes: Maximum execution time in minutes (default: 30)

    Returns:
        Summary of the generated code and execution result
    """

    # Create workspace
    working_dir = await create_working_directory()

    # Generate code with Claude Code
    generated_code, log, exit_code, success = await claude_code_generator(
        prompt=prompt,
        working_dir=working_dir,
        max_turns=max_turns,
        budget_limit=budget_limit,
        timeout_minutes=timeout_minutes,
    )

    # Prepare result summary
    if success:
        result = f"""✅ Claude Code Successfully Generated Code

Prompt: {prompt}
Max Turns: {max_turns}
Budget Limit: ${budget_limit}

Exit Code: {exit_code}

Generated code is available in the output directory.
The code has been created based on your requirements and should be ready to use.

Execution Log:
{log[:1000]}{"..." if len(log) > 1000 else ""}
"""
    else:
        result = f"""❌ Claude Code Execution Failed

Prompt: {prompt}
Max Turns: {max_turns}
Budget Limit: ${budget_limit}

Exit Code: {exit_code}

Please check the logs and try again with a modified prompt if needed.

Error Log:
{log[:1000]}{"..." if len(log) > 1000 else ""}
"""

    return result


if __name__ == "__main__":
    flyte.init_from_config("../../config.yaml")
    run = flyte.run(main)
    print(run.url)
